{"name": "При нажатии в модальном окне с информацией об ингридиенте крестика , окно закрывается", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"BurgerIngredient_ingredient__text__yp3dH\">...</p> is not clickable at point (480, 396). Other element would receive the click: <img src=\"https://code.s3.yandex.net/react/code/bun-01.png\" alt=\"Флюоресцентная булка R2-D3\" class=\"BurgerIngredient_ingredient__image__3e-07 ml-4 mr-4\">\n  (Session info: chrome-headless-shell=126.0.6478.128)\nStacktrace:\n\tGetHandleVerifier [0x00007FF66CB2EEA2+31554]\n\t(No symbol) [0x00007FF66CAA7ED9]\n\t(No symbol) [0x00007FF66C96872A]\n\t(No symbol) [0x00007FF66C9C012E]\n\t(No symbol) [0x00007FF66C9BDAF2]\n\t(No symbol) [0x00007FF66C9BAF8B]\n\t(No symbol) [0x00007FF66C9BA156]\n\t(No symbol) [0x00007FF66C9AC151]\n\t(No symbol) [0x00007FF66C9DD02A]\n\t(No symbol) [0x00007FF66C9ABA76]\n\t(No symbol) [0x00007FF66C9DD240]\n\t(No symbol) [0x00007FF66C9FC977]\n\t(No symbol) [0x00007FF66C9DCDD3]\n\t(No symbol) [0x00007FF66C9AA33B]\n\t(No symbol) [0x00007FF66C9AAED1]\n\tGetHandleVerifier [0x00007FF66CE38B1D+3217341]\n\tGetHandleVerifier [0x00007FF66CE85AE3+3532675]\n\tGetHandleVerifier [0x00007FF66CE7B0E0+3489152]\n\tGetHandleVerifier [0x00007FF66CBDE776+750614]\n\t(No symbol) [0x00007FF66CAB375F]\n\t(No symbol) [0x00007FF66CAAEB14]\n\t(No symbol) [0x00007FF66CAAECA2]\n\t(No symbol) [0x00007FF66CA9E16F]\n\tBaseThreadInitThunk [0x00007FFA769C7374+20]\n\tRtlUserThreadStart [0x00007FFA76FFCC91+33]", "trace": "self = <tests.test_main_page.TestMainPage object at 0x00000224B552BDA0>, pages = <web_pages.UIWorkerWeb object at 0x00000224B55D9880>\n\n    @allure.title('При нажатии в модальном окне с информацией об ингридиенте крестика , окно закрывается')\n    @allure.description('Нажимает на крестик в правом верхнем углу окна и проверяем, что всплывающее окно закрылось')\n    def test_close_ingredient_details_window(self, pages):\n>       pages.click_on_ingredient()\n\ntests\\test_main_page.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nweb_pages\\main_page.py:22: in click_on_ingredient\n    self.click_on_element(MainPageLocators.BUN_INGREDIENT)\nweb_pages\\base_page.py:16: in click_on_element\n    self.driver.find_element(*locator).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000224B55D86B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF66CA9E16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA769C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA76FFCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"BurgerIngredient_ingredient__text__yp3dH\">...</p> is not clickable at point (480, 396). Other element would receive the click: <img src=\"https://code.s3.yandex.net/react/code/bun-01.png\" alt=\"Флюоресцентная булка R2-D3\" class=\"BurgerIngredient_ingredient__image__3e-07 ml-4 mr-4\">\nE         (Session info: chrome-headless-shell=126.0.6478.128)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66CB2EEA2+31554]\nE       \t(No symbol) [0x00007FF66CAA7ED9]\nE       \t(No symbol) [0x00007FF66C96872A]\nE       \t(No symbol) [0x00007FF66C9C012E]\nE       \t(No symbol) [0x00007FF66C9BDAF2]\nE       \t(No symbol) [0x00007FF66C9BAF8B]\nE       \t(No symbol) [0x00007FF66C9BA156]\nE       \t(No symbol) [0x00007FF66C9AC151]\nE       \t(No symbol) [0x00007FF66C9DD02A]\nE       \t(No symbol) [0x00007FF66C9ABA76]\nE       \t(No symbol) [0x00007FF66C9DD240]\nE       \t(No symbol) [0x00007FF66C9FC977]\nE       \t(No symbol) [0x00007FF66C9DCDD3]\nE       \t(No symbol) [0x00007FF66C9AA33B]\nE       \t(No symbol) [0x00007FF66C9AAED1]\nE       \tGetHandleVerifier [0x00007FF66CE38B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF66CE85AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF66CE7B0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF66CBDE776+750614]\nE       \t(No symbol) [0x00007FF66CAB375F]\nE       \t(No symbol) [0x00007FF66CAAEB14]\nE       \t(No symbol) [0x00007FF66CAAECA2]\nE       \t(No symbol) [0x00007FF66CA9E16F]\nE       \tBaseThreadInitThunk [0x00007FFA769C7374+20]\nE       \tRtlUserThreadStart [0x00007FFA76FFCC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Нажимает на крестик в правом верхнем углу окна и проверяем, что всплывающее окно закрылось", "steps": [{"name": "Кликаем на ингредиент", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"BurgerIngredient_ingredient__text__yp3dH\">...</p> is not clickable at point (480, 396). Other element would receive the click: <img src=\"https://code.s3.yandex.net/react/code/bun-01.png\" alt=\"Флюоресцентная булка R2-D3\" class=\"BurgerIngredient_ingredient__image__3e-07 ml-4 mr-4\">\n  (Session info: chrome-headless-shell=126.0.6478.128)\nStacktrace:\n\tGetHandleVerifier [0x00007FF66CB2EEA2+31554]\n\t(No symbol) [0x00007FF66CAA7ED9]\n\t(No symbol) [0x00007FF66C96872A]\n\t(No symbol) [0x00007FF66C9C012E]\n\t(No symbol) [0x00007FF66C9BDAF2]\n\t(No symbol) [0x00007FF66C9BAF8B]\n\t(No symbol) [0x00007FF66C9BA156]\n\t(No symbol) [0x00007FF66C9AC151]\n\t(No symbol) [0x00007FF66C9DD02A]\n\t(No symbol) [0x00007FF66C9ABA76]\n\t(No symbol) [0x00007FF66C9DD240]\n\t(No symbol) [0x00007FF66C9FC977]\n\t(No symbol) [0x00007FF66C9DCDD3]\n\t(No symbol) [0x00007FF66C9AA33B]\n\t(No symbol) [0x00007FF66C9AAED1]\n\tGetHandleVerifier [0x00007FF66CE38B1D+3217341]\n\tGetHandleVerifier [0x00007FF66CE85AE3+3532675]\n\tGetHandleVerifier [0x00007FF66CE7B0E0+3489152]\n\tGetHandleVerifier [0x00007FF66CBDE776+750614]\n\t(No symbol) [0x00007FF66CAB375F]\n\t(No symbol) [0x00007FF66CAAEB14]\n\t(No symbol) [0x00007FF66CAAECA2]\n\t(No symbol) [0x00007FF66CA9E16F]\n\tBaseThreadInitThunk [0x00007FFA769C7374+20]\n\tRtlUserThreadStart [0x00007FFA76FFCC91+33]\n\n", "trace": "  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\web_pages\\main_page.py\", line 22, in click_on_ingredient\n    self.click_on_element(MainPageLocators.BUN_INGREDIENT)\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\web_pages\\base_page.py\", line 16, in click_on_element\n    self.driver.find_element(*locator).click()\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Дождаться кликабельности элемента", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', '//p[text()=\"Флюоресцентная булка R2-D3\"]')"}], "start": 1721238285449, "stop": 1721238285496}, {"name": "Кликаем по элементу ('xpath', '//p[text()=\"Флюоресцентная булка R2-D3\"]')", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"BurgerIngredient_ingredient__text__yp3dH\">...</p> is not clickable at point (480, 396). Other element would receive the click: <img src=\"https://code.s3.yandex.net/react/code/bun-01.png\" alt=\"Флюоресцентная булка R2-D3\" class=\"BurgerIngredient_ingredient__image__3e-07 ml-4 mr-4\">\n  (Session info: chrome-headless-shell=126.0.6478.128)\nStacktrace:\n\tGetHandleVerifier [0x00007FF66CB2EEA2+31554]\n\t(No symbol) [0x00007FF66CAA7ED9]\n\t(No symbol) [0x00007FF66C96872A]\n\t(No symbol) [0x00007FF66C9C012E]\n\t(No symbol) [0x00007FF66C9BDAF2]\n\t(No symbol) [0x00007FF66C9BAF8B]\n\t(No symbol) [0x00007FF66C9BA156]\n\t(No symbol) [0x00007FF66C9AC151]\n\t(No symbol) [0x00007FF66C9DD02A]\n\t(No symbol) [0x00007FF66C9ABA76]\n\t(No symbol) [0x00007FF66C9DD240]\n\t(No symbol) [0x00007FF66C9FC977]\n\t(No symbol) [0x00007FF66C9DCDD3]\n\t(No symbol) [0x00007FF66C9AA33B]\n\t(No symbol) [0x00007FF66C9AAED1]\n\tGetHandleVerifier [0x00007FF66CE38B1D+3217341]\n\tGetHandleVerifier [0x00007FF66CE85AE3+3532675]\n\tGetHandleVerifier [0x00007FF66CE7B0E0+3489152]\n\tGetHandleVerifier [0x00007FF66CBDE776+750614]\n\t(No symbol) [0x00007FF66CAB375F]\n\t(No symbol) [0x00007FF66CAAEB14]\n\t(No symbol) [0x00007FF66CAAECA2]\n\t(No symbol) [0x00007FF66CA9E16F]\n\tBaseThreadInitThunk [0x00007FFA769C7374+20]\n\tRtlUserThreadStart [0x00007FFA76FFCC91+33]\n\n", "trace": "  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\web_pages\\base_page.py\", line 16, in click_on_element\n    self.driver.find_element(*locator).click()\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\User\\PycharmProjects\\Diplom_3\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "locator", "value": "('xpath', '//p[text()=\"Флюоресцентная булка R2-D3\"]')"}], "start": 1721238285496, "stop": 1721238286591}], "start": 1721238285449, "stop": 1721238286593}], "parameters": [{"name": "driver_do", "value": "'chrome'"}], "start": 1721238285449, "stop": 1721238286596, "uuid": "0912bea2-5f2d-4e89-af56-0e59061f691b", "historyId": "fd838bc2c463e20d93b743a265ebff11", "testCaseId": "2808067febcdcf06eb4fbcd67f4006e8", "fullName": "tests.test_main_page.TestMainPage#test_close_ingredient_details_window", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_page"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "DESKTOP-UBJ37DP"}, {"name": "thread", "value": "8976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_page"}]}